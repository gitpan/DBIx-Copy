             ***************************************
             README!

Be aware that the testing done during the installation is /NOT GOOD
ENOUGH/.  Testing should be done towards a real database.  I strongly
advise anyone to manually do through the easy synopsis section to test
if it actually works.

The rest of the README can safely be ignored, but remember to read the
POD.


             ***************************************
             DESCRIPTION

This Module might help you copying a DB.  Currently only the data itself can
be copied, future versions will handle the DD (data definitons) as well.

This module can also be used for "upgrading" a DB when severe changes has
been done to the underlying tables.  I have contributed
DBIx::Copy::UpgradeRT as an example.  The data structures for RT - Request
Tracker - was severely modified between version 1.0 and 1.1.  Indeed so
badly shaken up that DBIx::Copy aren't allowed to do much on its own hand
anyway :)

The next version will also provide a mirroring/merging feature - thus the
old version and old DB might be rolling along, and the script might be
executed from the crontab and update the new tables.  However, there should
be Better Ways for handling DB mirroring on a permanent basis.


             ***************************************
             PERSONAL MOTIVATION

For the time beeing, this is a very simple module.  The POD is bigger
than the code.  Anyway, I think such a module might be useful, and I
think it might grow - I have a long Todo-list.

I'm to update/upgrade quite a lot of things locally, and I found that
I needed to copy from one DBMS at one computer to another DBMS at
another computer - twice, first for testing, then I have to move the
production DB.  The old DB system doesn't give me transaction logs in
an open format, so the easiest thing is to do the complete copy twice.
So the operation should be redoable by hitting ^R at the command
line...

The export facility at the old database is ... well, at least it does
bump the data into `well-behaving' file formats ... but I felt more
for doing this operation through the DBI interface than to handle
export, network copying, and then try to tell the new DBMS to import
the data - I have no clue if the special conditions (like single
quotes and newlines) are handled equally in the export and import
tool.

I've spent more time making this into a proper CPAN module and
documenting this than what I've actually spent coding.  It doesn't
really make sense for such a one-time project, or what?  Well - I'm
completely fresh as a CPAN author, and before humiliating myself by
trying to release some of my uglier hacks, I want a bit of experience.
I hope this module will provide me with useful feedback.  Please flame
me at tobix@irctos.org.


             ***************************************
             INSTALLATION

Standard installation:
 
        perl Makefile.PL
        make
        make test
        make install




Mail tobix@irctos.org for more information. I'm glad to get any
feedback whether this module is usable or not.


             ***************************************
	     LICENSE

Copyright (c) 2000 Tobias Brox <tobix@irctos.org>. All rights reserved. This
program is free software; you can redistribute it and/or modify it according
to the GNU Public License.

	     
